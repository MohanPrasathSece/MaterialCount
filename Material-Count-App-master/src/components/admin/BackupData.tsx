"use client";

import { useState } from "react";
import { useOwner } from "@/hooks/use-owner";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { backupData } from "@/app/actions";
import { useToast } from "@/hooks/use-toast";
import {
Â  Card,
Â  CardDescription,
Â  CardHeader,
Â  CardTitle,
Â  CardFooter,
} from "@/components/ui/card";

export function BackupData() {
Â  const isOwner = useOwner();
Â  const [loading, setLoading] = useState(false);
Â  const { toast } = useToast();

Â  const handleBackup = async () => {
Â  Â  setLoading(true);
Â  Â  toast({
Â  Â  Â  title: "Creating Backup",
Â  Â  Â  description: "Fetching all data from the database. This may take a moment...",
Â  Â  });

Â  Â  const result = await backupData();

Â  Â  if (result.success && result.data) {
Â  Â  Â  try {
Â  Â  Â  Â  const jsonString = JSON.stringify(result.data, (key, value) => {
Â  Â  Â  Â  Â  // Custom replacer to handle Firestore Timestamps
Â  Â  Â  Â  Â  if (value && typeof value === 'object' && value.seconds !== undefined && value.nanoseconds !== undefined) {
Â  Â  Â  Â  Â  Â  Â  return new Date(value.seconds * 1000 + value.nanoseconds / 1000000).toISOString();
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return value;
Â  Â  Â  Â  }, 2);
Â  Â  Â  Â  
Â  Â  Â  Â  const blob = new Blob([jsonString], { type: "application/json" });
Â  Â  Â  Â  const url = URL.createObjectURL(blob);
Â  Â  Â  Â  const a = document.createElement("a");
Â  Â  Â  Â  a.href = url;
Â  Â  Â  Â  a.download = `firebase-backup-${new Date().toISOString().split('T')[0]}.json`;
Â  Â  Â  Â  document.body.appendChild(a);
Â  Â  Â  Â  a.click();
Â  Â  Â  Â  document.body.removeChild(a);
Â  Â  Â  Â  URL.revokeObjectURL(url);
Â  Â  Â  Â  
Â  Â  Â  Â  toast({
Â  Â  Â  Â  Â  title: "Backup Successful",
Â  Â  Â  Â  Â  description: "Your data has been downloaded as a JSON file.",
Â  Â  Â  Â  });
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  toast({
Â  Â  Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  Â  Â  Â  title: "Error Creating File",
Â  Â  Â  Â  Â  Â  description: "Could not create the backup file on your device.",
Â  Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  toast({
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  Â  title: "Backup Failed",
Â  Â  Â  Â  description: result.message || "An unknown error occurred.",
Â  Â  Â  });
Â  Â  }

Â  Â  setLoading(false);
Â  };

Â  if (!isOwner) {
Â  Â  return null;
Â  }

Â  return (
Â  Â  <Card className="bg-muted/40 border-dashed">
Â  Â  Â  <CardHeader>
Â  Â  Â  Â  <CardTitle className="font-headline">Admin Controls</CardTitle>
Â  Â  Â  Â  <CardDescription>
Â  Â  Â  Â  Â  As an owner, you can perform administrative actions like creating a full backup of the database.
Â  Â  Â  Â  </CardDescription>
Â  Â  Â  </CardHeader>
Â  Â  Â  <CardFooter>
Â  Â  Â  Â  <Button 
            onClick={handleBackup} 
            disabled={loading}
            // ðŸ’¡ FIX: Forces button to full width on mobile, then auto on small screens and up.
            className="w-full sm:w-auto" 
        >
Â  Â  Â  Â  Â  <Download className="w-4 h-4 mr-2" />
Â  Â  Â  Â  Â  {loading ? "Backing up..." : "Take Backup"}
Â  Â  Â  Â  </Button>
Â  Â  Â  </CardFooter>
Â  Â  </Card>
Â  );
}